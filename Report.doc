Title: Big Boy Dispatcher

Student Information:
Reconbike - Brendon Bano - 45317674
ED2303 - Ethan Darnley - 45956022
caleb-ledger - Caleb Ledger - 45238472

Introduction:
The purpose of this project is to create a job scheduler/dispatcher that automatically assigns job to the largest server type. This job scheduler needs to be compatible with
the supplied ds-server file (from https://github.com/distsys-MQ/ds-sim). The scheduler should function in a similar manned to the ds-client file provided within the supplied file.
All simulation logs (provided via the "-v brief" function) should exactly match those produced by the original ds-client file.

System Overview:

Design:

Throughout this project, we as a group have had many questions and problems to work through to understand what it was, we wanted to achieve exactly, after enough research and understanding, we concluded that for DS-Client we were going to design it in rather a linear fashion. Why? Because We knew that for this Task the DS-Client was only going to have ONE function and that is to be a job-Scheduler for the DS-Server model with every single job being treated the same way with no given opportunities to be different, this is all based on the algorithm of All to largest; we took the meaning of All to largest as a methodology. That All to Largest means our entire program will be focused on the same goal, to push all jobs to the largest server; it was supposed to all work in unison and there would be no need to divide the program into separate aspects/methods. There were a few talks to consider that All to largest is simply just a method to handle all jobs and push them to the highest server, but that was not the case with this group. Our entire source code was an implementation of  the All to Largest Policy; as that was to be the soul purpose of our DS-Client program.

With our Idea set in stone we had to consider the constraints of our project, we knew that our biggest and most important constraint was how to identify the largest server, this was prescribed to us as the server with the greatest number of cores was to be identified and used every single time, 

We Knew that when dealing with socket programming in java that for the DS-Client we were going to have to handle the transmission of bytes constantly which we could easily catch in byte arrays but loads of conversions to all different data types were required before they could be used as normal variables for our scheduler. 

We Decided in the end that most of the functionality will be handled within the giant while loop, have all important features such as the job scheduler and largest server identifier be encased in the loop, this is the result when we are dealing with the constant oncoming responses from the server and the loop is only broken when the server is ending.


Implementation:

The client was implemented in Java. Inbuilt java net libraries were used to communicate between the client and server through the use of socket programming. The StandardCharsets library was also used for the conversion between UTF characters and the transferred byte data. 

The client implementation was done in a linear format, beginning with the string declarations for the commands to be delivered to the server. Brendon designed and developed most of the initial code for the socket programming and the outline for receiving and sending of commands. Brendon used the java socket library to create a new socket to send and receive information from the server at host “localhost” and port “50000”. A new DataInputStream and a DataOutputStream were instantiated from the java net library to deal with the sending and receiving of the bytes. 

After these commands and objects have been created to handle the network communication, the first messages are sent in compliance to the server’s protocol documentation by using our data-streams to create the initial handshake and complete the authentication process. Before reading the incoming data stream, a byte array is created of the necessary length to store the data. For example, when receiving the “OK” command from the server, this has two characters and therefore a byte array of length two is created. Then a new string is created, using the StandardCharsets library to convert the byte array data into UTF-8 characters. 

The core of the Stage1 client and our primary “allToLargest” algorithm, that assigns jobs to the largest server, is comprised in a while loop. A boolean called “tasksLeft” is initially created with the value true and while this value remains true this loop continues and once the server has finished dispatching jobs to the client, this loop will terminate and begin the client to server termination/goodbye procedure. Firstly, the server’s response is received and processed by the client code. Then conditional statements were used to check whether the server had any jobs left to be scheduled by the client. The first conditional deals with the loop’s termination case, which is when the server is replying ‘NONE’ to tell the client there is no jobs left to schedule, then with this information, ‘tasksLeft’ becomes false and the client initiates the quit process with the server and breaks out of this loop. 
However, if there are jobs left, the server will send the string ‘JOBN’ followed by the job information, including the job submit time, job id, job runtime and the job’s core, memory, and disk requirements. The client needs this information, so Ethan developed the code so that the client parses and splits the string at every space and each piece of information put into its own string variable. The client then sends the ‘GETALL’ command to get the total amount of servers. This information is then parsed again and stored in variables. This information is used for creating the byte array of the required size to store the incoming complete list of servers, this is done so the client doesn’t use any ‘magic numbers’ to create the byte array. After the client sends the “OK” message the total list is then sent and stored in this new byte array. 
Then comes the main algorithm for getting the largest server. Caleb was in charge of developing and designing this section. Firstly, if the variable ‘largestServer’ is still null and hasn’t been given a server value, then this algorithm runs. This makes sure this code doesn’t operate every time the while loop repeats. The client gets the list of servers obtained previously and parses each line so each server can be viewed individually. A loop then goes through each line and checks the specifications of each server, storing the best server in a variable called ‘biggestServer’. The best server being the first listed server with the highest number of cores. Once this loop is completed, the name and id of the ‘biggestServer’ is written into the ‘largestServer’ variable to be used for scheduling commands. 
After sending the server another “OK” response, the client finally sends the scheduling command by sending the keyword “SCHD” with the corresponding job id and largest server id that was parsed and stored in the sections above. The client sends a “REDY” command to indicate it is ready for a new job, and the loop continues again. After this loop is simply the quit command and final goodbye protocol. 


References:

